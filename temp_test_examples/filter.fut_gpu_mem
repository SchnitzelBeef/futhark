types {

}



entry("main",
      {xs: []i32},
      {[]i32})
  entry_main (xs_mem_6 : mem@device,
              n_5232 : i64,
              xs_5233 : [n_5232]i32 @ xs_mem_6 ->
                        {offset: 0i64;
                         strides: [1i64];
                         shape: [n_5232]})
  : {mem@device,
     [n_5232]i32 @ ?0@device ->
     {offset: 0i64;
      strides: [1i64];
      shape: [n_5232]}#([2], [1])} = {
  let {bytes_7 : i64} =
    mul_nw64(4i64, n_5232)
  let {mem_8 : mem@device} =
    alloc(bytes_7, @device)
  let {dest_53290 : [n_5232]i32 @ mem_8 ->
                    {offset: 0i64;
                     strides: [1i64];
                     shape: [n_5232]}} =
    replicate([n_5232], 0i32)
  let {discard_4 : i64,
       defunc_0_scan_res_52563 : [n_5232]i32 @ mem_8 ->
                                 {offset: 0i64;
                                  strides: [1i64];
                                  shape: [n_5232]}} =
    loop {scanacc_0 : i64,
          write_out_2 : *[n_5232]i32 @ mem_8 ->
                        {offset: 0i64;
                         strides: [1i64];
                         shape: [n_5232]}} = {0i64, dest_53290}
    for i_1:i64 < n_5232 do {
      let {eta_p_52571 : i32} =
        xs_5233[i_1]
      let {i32_res_52591 : i64} =
        sext i32 eta_p_52571 to i64
      let {defunc_0_op_res_5255 : i64} =
        add64(scanacc_0, i32_res_52591)
      let {eta_p_slice_5 : [1i64]i32 @ xs_mem_6 ->
                           {offset: i_1;
                            strides: [1i64];
                            shape: [1i64]}} =
        xs_5233[i_1 :+ 1i64 * 1i64]
      let {write_out_3 : [n_5232]i32 @ mem_8 ->
                         {offset: 0i64;
                          strides: [1i64];
                          shape: [n_5232]}} =
        write_out_2 with? [defunc_0_op_res_5255 :+ 1i64 * 1i64] = eta_p_slice_5
      in {defunc_0_op_res_5255, write_out_3}
    }
  in {mem_8, defunc_0_scan_res_52563}
}
